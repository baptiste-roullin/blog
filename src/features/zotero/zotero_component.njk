{# PAS DE LIGNE VIDE OU D'ESPACES CONSÉCUTIFS #}
{# Cela évite que le HTML généré soit détecté comme du markdown #}
<ul class="mb-5 zotero-list sm:mb-3 not-prose">
	{% for item in items %}
		<li >
			<div class="my-4 first:mt-2">
				<a href="{{item.url}}" class="text-base underline lg:text-lg sm:no-underline hover:underline" >{{item.title}}</a>
				<div class="flex gap-2 pt-2 text-base zotero-metadata lg:pt-1">
					{% if item.parsedDate and item.itemType !== "webpage" %}
						<span>{{item.parsedDate | dateHumanFormat("yyyy") }}</span>
						<span aria-hidden="true" class=" last:hidden first:hidden">~</span>
					{% endif %}
					{% if item.attachmentURL %}
							<a class="text-gray-600 underline sm:pt-0" href="{{item.attachmentURL}}">PDF</a>
						<span aria-hidden="true" class=" last:hidden first:hidden">~</span>
					{% endif %}
					{% if item.abstractNote %}
					<details>
						<summary class="text-gray-600 underline cursor-pointer">Résumé</summary>
						<span class="relative mt-0 text-base details-content" hidden="until-found">{{item.abstractNote | markdownify }}</span>
					</details>
					{% endif %}
				</div>
			</div>
		</li>
	{% endfor %}
</ul>
<script>
window.addEventListener('load', function () {
	if (!window.zoteroSummary) {
		window.zoteroSummary = function () {
		const metada = document.querySelector('.zotero-metadata')
		const refX = metada.getBoundingClientRect().x;
			[...document.querySelectorAll(' details')].forEach(el => {
					if (!('onbeforematch' in document.body) ) {
						el.querySelector('.details-content').removeAttribute('hidden')
					}
			const summary = el.querySelector('summary')
			const abstract = el.querySelector('p')
			summary.addEventListener('click', function (e) {
				//console.log(refX)
				const elX = e.currentTarget.getBoundingClientRect().x
				el.querySelector('.details-content').style.left = (0 - elX + refX) + 'px'
			})
			})
	}
		window.zoteroSummary()
	}
	}
 )
</script>